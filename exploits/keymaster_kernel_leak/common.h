
#ifndef __COMMON_H_
#define __COMMON_H_

#include "QSEEComAPI.h"

#include <linux/ioctl.h>

typedef struct qseecom_api_handle {
    struct QSEECom_handle *qseecom;
    void *libhandle;
    int (*QSEECom_start_app)(struct QSEECom_handle ** handle, char* path,
                          char* appname, uint32_t size);
    int (*QSEECom_shutdown_app)(struct QSEECom_handle **handle);
    int (*QSEECom_send_cmd)(struct QSEECom_handle* handle, void *cbuf,
                          uint32_t clen, void *rbuf, uint32_t rlen);
    int (*QSEECom_send_modified_cmd)(struct QSEECom_handle* handle, void *cbuf,
                          uint32_t clen, void *rbuf, uint32_t rlen,
                          struct QSEECom_ion_fd_info *ihandle);
    int (*QSEECom_set_bandwidth)(struct QSEECom_handle* handle, bool high);
} qseecom_api_handle_t;

struct ion_handle;

struct ion_handle_data {
	struct ion_handle *handle;
};

struct qcom_km_ion_info_t {
    int32_t ion_fd;
    int32_t ifd_data_fd;
    struct ion_handle_data ion_alloc_handle;
    unsigned char * ion_sbuffer;
    uint32_t sbuf_len;
};

struct ion_allocation_data {
	size_t len;
	size_t align;
	unsigned int heap_mask;
	unsigned int flags;
	struct ion_handle *handle;
};

struct ion_fd_data {
	struct ion_handle *handle;
	int fd;
};

enum widevine_command_code {

	//2x Commands
	OEMCrypto_EncryptAndStore = 0x20002,
	OEMCrypto_GetKeyboxData,
	OEMCrypto_IdentifyDevice,
	OEMCrypto_GetRandom,
	unused,
	OEMCrypto_InstallKeybox,
	OEMCrypto_IsKeyBoxValid,
	OEMCrypto_Initialize,
	OEMCrypto_Terminate,
	OEMCrypto_GetKeyData,
	OEMCrypto_GetDeviceID,
	OEMCrypto_SetEntitlementKey,
	OEMCrypto_DeriveControlWord,
	OEMCrypto_DecryptVideo,
	OEMCrypto_DecryptAudio,
	unused2,
	QC_OEMCrypto_Delete_Keybox,

	//5x Commands
	drm_save_keys = 0x50001,
	drm_verify_keys,
	PRDiagMaintenanceHandler,
	PRDiagProvisionDataHandler,
	drm_prov_finalize,
	drm_app_save_qsee_ipc_wrapped_keys,
	drm_app_encapsulate_save_keys,
	drm_save_wrapped_keys,

	//6x Commands
	wv_dash_core_initialize = 0x61001,
	OEMCrypto_Dash_Terminate,
  	OEMCrypto_OpenSession,
 	OEMCrypto_CloseSession,
  	OEMCrypto_GenerateDerivedKeys,
  	OEMCrypto_GenerateNonce,
  	OEMCrypto_GenerateSignature,
  	wv_dash_core_load_keys_v8,
  	wv_dash_core_refresh_keys,
  	OEMCrypto_SelectKey,
  	OEMCrypto_DecryptCTR,
  	OEMCrypto_WrapKeybox,
  	OEMCrypto_Dash_InstallKeybox,
  	OEMCrypto_Dash_IsKeyboxValid,
  	OEMCrypto_Dash_GetDeviceID,
  	OEMCrypto_Dash_GetKeyData,
  	OEMCrypto_Dash_GetRandom,
  	wrapper_wv_dash_core_rewrap_device_rsakey,
  	OEMCrypto_LoadDeviceRSAKey,
  	OEMCrypto_GenerateRSASignature_V8,
  	OEMCrypto_DeriveKeysFromSessionKey,
  	OEMCrypto_ApiVersion,
  	OEMCrypto_Generic_Encrypt,
  	OEMCrypto_Generic_Decrypt,
  	OEMCrypto_Generic_Sign,
  	OEMCrypto_Generic_Verify,
  	OEMCrypto_Dash_InstallEncapKeybox,
  	OEMCrypto_Dash_InstallOEMWrappedKeybox,
  	QC_OEMCrypto_Dash_Delete_Keybox,
  	wrapper_get_hdcp_capability,
  	unknown,
  	OEMCrypto_UpdateUsageTable,
  	OEMCrypto_DeactivateUsageEntry,
  	OEMCrypto_ReportUsage,
  	OEMCrypto_DeleteUsageEntry,
  	OEMCrypto_DeleteUsageTable,
  	wv_dash_core_load_keys,
  	OEMCrypto_GenerateRSASignature,

};

#endif
